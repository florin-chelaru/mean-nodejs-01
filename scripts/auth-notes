# Tutorial for JWT tokens: https://www.youtube.com/watch?v=mbsmsi7l3r4&ab_channel=WebDevSimplified

# What happens if your JWT is stolen: https://developer.okta.com/blog/2018/06/20/what-happens-if-your-jwt-is-stolen

# From: https://blog.logrocket.com/jwt-authentication-best-practices/#:~:text=A%20JWT%20needs%20to%20be,attacker%20access%20to%20the%20token.

To keep them secure, you should always store JWTs inside an httpOnly cookie. This is a special kind of cookie that’s only sent in HTTP requests to the server. It’s never accessible (both for reading or writing) from JavaScript running in the browser.


# Google auth blog: https://medium.com/@jackrobertscott/how-to-use-google-auth-api-with-node-js-888304f7e3a0
# Google login button: https://developers.google.com/identity/gsi/web/guides/display-button
# Example using google login button and angular: https://nimatrazmjo.medium.com/implementing-google-one-tap-sign-in-using-angular-9-and-expressjs-bc78cf740d70

# continue login here, where we receive the login token: https://developers.google.com/identity/gsi/web/reference/js-reference#login_uri
# or here: https://developers.google.com/identity/gsi/web/reference/html-reference#data-callback

# Map custom domain to ip address
sudo vi /private/etc/hosts

# HTTPS certificate: create it like this. https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/
# and load certificate like this:
var server = https.createServer({
    key: fs.readFileSync('certs/test.expressui.com.key'),
    cert: fs.readFileSync('certs/test.expressui.com.crt')
}, app);

# So in order for Chrome not to complain at all you also need to become a certification authority. Below are some links.
# https://github.com/FiloSottile/mkcert
mkcert --install
mkcert bunny.com "*.bunny.com"
# in /etc/environment:
SSL_CRT_FILE=/home/ubuntu/react/app/my-app/cert/bunny.com+1.pem
SSL_KEY_FILE=/home/ubuntu/react/app/my-app/cert/bunny.com+1-key.pem

# More: https://www.freecodecamp.org/news/how-to-set-up-https-locally-with-create-react-app/
# React SSL certificate: https://create-react-app.dev/docs/using-https-in-development/#custom-ssl-certificate
# And: https://stackoverflow.com/questions/41192491/how-can-i-provide-a-ssl-certificate-with-create-react-app


# This shows you how to set a HTTPOnly cookie on the server side, making all requests to the server secure: https://javascript.plainenglish.io/how-to-secure-jwt-in-a-single-page-application-6a46e69fc393

# More CSRF links
https://www.youtube.com/watch?v=2uvrGQEy8i4&ab_channel=OWASPLondon (slides: https://owasp.org/www-pdf-archive/David_Johansson-Double_Defeat_of_Double-Submit_Cookie.pdf). The slides reference this AngularJS protection: https://www.synopsys.com/blogs/software-security/angularjs-security-http-service/
This question hints better as to how the implementation must look like: https://stackoverflow.com/questions/41064749/csrf-protection-in-a-angular-spa-using-double-submit-cookie
See this answer for creating a CSRF interceptor in Angular: https://stackoverflow.com/questions/48729070/csrf-protection-in-angular-js-application-with-cross-domain
