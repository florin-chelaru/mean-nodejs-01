export INST=express-ui-02
multipass launch --name $INST
multipass ls
mkdir $INST


export NODECODE=/Users/florinc/dev/mean-nodejs-01/$INST
export REMOTENODECODE=/home/ubuntu/app
multipass mount $NODECODE $INST:$REMOTENODECODE

multipass shell $INST

# https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-20-04
sudo apt update
sudo apt install nodejs # requires Y/n
node -v
sudo apt install npm

# update nodejs to latest version: https://phoenixnap.com/kb/update-node-js-version

npm cache clean -f
sudo npm install -g n
sudo n stable
hash -r
node --version

# https://expressjs.com/en/starter/generator.html

npx express-generator
express --view=pug app
cd app
npm install
npm audit fix --force
npm audit fix --force # second one is needed to update pug

# launch app: 
DEBUG=app:* npm start

# navigate to http://192.168.64.7:3000/


# typescript: https://www.digitalocean.com/community/tutorials/setting-up-a-node-project-with-typescript
cd /home/ubuntu/nodejs/app

npm install --save-dev typescript

vi tsconfig.json

====
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "dist"
  },
  "lib": ["es2015"]
}
====


# express: https://expressjs.com/en/starter/installing.html
npm install express --save

mkdir src
vi src/app.ts

npm install path --save
npm install http-status-codes --save
npm install jet-logger --save
npm install express-async-errors --save
npm install @types/node --save-dev

# set up the linter: https://www.digitalocean.com/community/tutorials/setting-up-a-node-project-with-typescript
npm install --save-dev eslint

# This will ask you a series of questions. For this project weâ€™ll answer the following:

How would you like to use ESLint?: To check syntax and find problems
What type of modules does your project use?: JavaScript modules (import/export)
Which framework does your project use?: None of these
Does your project use TypeScript?: Yes
Where does your code run?: Node
What format do you want your config file to be in?: JavaScript
Finally, you will be prompted to install some additioanl eslint libraries. Choose Yes.

npx eslint . --ext .ts

npx tsc
set DEBUG=app:* & npm start

# now navigate to http://192.168.64.4:3000/ and you should see "Hello World!"

==== 

# Bootstrap

npm install bootstrap --save

# Fetch in typescript: https://www.npmjs.com/package/node-fetch

# modify package.json:

====
{
  "name": "node_project",
  "version": "1.0.0",
  "description": "",
  "main": "build/app.js",
  "scripts": {
    "start": "tsc && node build/app.js",
    "lint": "eslint . --ext .ts",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@types/express": "^4.17.1",
    "@typescript-eslint/eslint-plugin": "^5.4.0",
    "@typescript-eslint/parser": "^5.4.0",
    "eslint": "^8.3.0",
    "typescript": "^4.5.2"
  },
  "dependencies": {
    "express": "^4.17.1"
  }
}

====


==== Older ====

# https://www.npmjs.com/package/express-generator-typescript

cd app
sudo npm install -g express-generator-typescript
npx express-generator-typescript .

npm run start:dev

# Available commands for the server.
Run the server in development mode: npm run start:dev.
Run all unit-tests with hot-reloading: npm test.
Run a single unit-test: npm test -- --testFile="name of test file" (i.e. --testFile=Users).
Run all unit-tests without hot-reloading: npm run test:no-reloading
Check for linting errors: npm run lint.
Build the project for production: npm run build.
Run the production build: npm start.
Run production build with a different env file npm start -- --env="name of env file" (default is production).